name: Reusable Comment Parser Workflow

on:
  workflow_call:
    inputs:
      github_event:
        description: 'The JSON payload from the original trigger event'
        required: true
        type: string
permissions: read-all

jobs:
  parse-and-echo:
    runs-on: ubuntu-latest
    steps:
      - name: Parse Comment Data
        id: parsed_comment
        run: |
          COMMENT=$(echo '${{ inputs.github_event }}' | jq -r .comment.body)
          OPERATION=$(echo "$COMMENT" | awk '{print $2}')
          ENVIRONMENT=$(echo "$COMMENT" | awk '{print $3}')
          # Note: The SHA is not available in the issue_comment payload by default.
          # If needed, it must be fetched via API in the orchestrator.
          SHA="N/A (Requires API call in orchestrator)"

          echo "operation=$OPERATION" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Find Branch Name if Comment is on a PR
        id: branch_info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Default branch name to N/A
          BRANCH_NAME="N/A (Comment is not on a Pull Request)"
          # Check if the 'pull_request' key exists in the issue payload
          PR_URL=$(echo '${{ inputs.github_event }}' | jq -r '.issue.pull_request.url')
          
          if [[ "$PR_URL" != "null" ]]; then
            # If it exists, call the GitHub API to get PR details
            # Then parse the JSON response to get the head branch name
            BRANCH_NAME=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "$PR_URL" | jq -r '.head.ref')
          fi
          
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Echo Comment Information
        run: |
          echo "--- Comment Trigger Information ---"
          echo "Commit SHA:   ${{ steps.parsed_comment.outputs.sha }}"
          echo "Source Branch:${{ steps.branch_info.outputs.branch }}"
          echo "Operation:    ${{ steps.parsed_comment.outputs.operation }}"
          echo "Environment:  ${{ steps.parsed_comment.outputs.environment }}"
          echo "-----------------------------------"
