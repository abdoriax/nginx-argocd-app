name: Reusable Event Parser

on:
  workflow_call:
    inputs:
      github_event:
        description: 'The JSON payload of the github.event from the caller workflow'
        required: true
        type: string

jobs:
  tag-parse-and-echo:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Parse Event Data
        id: parsed_data
        run: |
          sha=$(echo '${{ inputs.github_event }}' | jq -r .after)
          tag_name=$(echo '${{ inputs.github_event }}' | jq -r .ref | sed 's!refs/tags/!!')
          
          echo "sha=$sha" >> $GITHUB_OUTPUT
          echo "tag=$tag_name" >> $GITHUB_OUTPUT
      - name: Find Branch Name from Tag using GitHub API
        id: branch_info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          TAG_NAME="${{ steps.parsed_data.outputs.tag }}"

          echo "Finding branches for tag: $TAG_NAME"

          # Step 1: Get the commit SHA from the tag reference.
          TAG_INFO_RESPONSE=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/$REPO/git/ref/tags/$TAG_NAME")
          
          COMMIT_SHA=$(echo "$TAG_INFO_RESPONSE" | jq -r .object.sha)

          if [ "$COMMIT_SHA" == "null" ] || [ -z "$COMMIT_SHA" ]; then
            echo "Error: Could not find commit SHA for tag $TAG_NAME."
            # Fallback to the SHA from the event if the tag lookup fails
            echo "Falling back to event's commit SHA: ${{ steps.parsed_data.outputs.sha }}"
            COMMIT_SHA="${{ steps.parsed_data.outputs.sha }}"
          fi

          echo "Commit SHA for tag is: $COMMIT_SHA"

          # Step 2: Find all branches where this commit is the HEAD.
          BRANCHES_RESPONSE=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/$REPO/commits/$COMMIT_SHA/branches-where-head")

          # Extract the first branch name from the list.
          BRANCH_NAME=$(echo "$BRANCHES_RESPONSE" | jq -r '.[0].name')

          if [ "$BRANCH_NAME" == "null" ] || [ -z "$BRANCH_NAME" ]; then
            echo "Warning: Could not find a branch where this commit is the HEAD."
            echo "This can happen if the tag points to an older commit."
            echo "The 'branches-where-head' API only finds branches where the commit is the tip."
            BRANCH_NAME="N/A"
          fi

          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Determine Environment
        id: environment
        run: |
          TAG="${{ steps.parsed_data.outputs.tag }}"
          ENV="production" # Default to production
          if [[ "$TAG" == *alpha* ]]; then
            ENV="development"
          elif [[ "$TAG" == *beta* ]]; then
            ENV="staging"
          fi
          echo "name=$ENV" >> $GITHUB_OUTPUT

      - name: Echo Extracted Information
        run: |
          echo "--- Extracted Information ---"
          echo "Commit SHA:   ${{ steps.parsed_data.outputs.sha }}"
          echo "Tag:          ${{ steps.parsed_data.outputs.tag }}"
          echo "Source Branch:${{ steps.branch_info.outputs.branch }}"
          echo "Environment:  ${{ steps.environment.outputs.name }}"
          echo "---------------------------"